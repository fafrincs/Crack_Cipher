# -*- coding: utf-8 -*-
"""cyphertest.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1v9jhWJci5wHt6NnMZmUSxzGNTZP5j2nB
"""

Letters = "abcdefghijklmnopqrstuvwxyz"

def isLetter(char):
	return (char in Letters)

def countLetters(text):
	count = 0
	for i in text.lower():
		if(isLetter(i)):
			count += 1
	return count

def freqTable(text):
	lettertext = []
	letterCounts = []
	# Loop through each letter in the alphabet - count number of times it appears
	for i in range(len(Letters)):
		count = 0
		for j in text.lower():
			if j == Letters[i]:
				count += 1
		#lettertext.append(i)
		letterCounts.append(count)
	return letterCounts

def IC(text):
	letterCounts = freqTable(text)
	# Loop through all letter counts, applying the calculation (the sigma part)
	total = 0
	for i in range(len(letterCounts)):
		ni = letterCounts[i]
		total += ni * (ni - 1)

	N = countLetters(text)
	c = 26.0 # Number of letters in the alphabet
	total = float(total) / ((N * (N - 1)))
	return total

def english_letter_freq_list():
    english_letter_freq ={'E':12.60, 'T':9.37, 'A':8.34, 'O':7.70, 'N':6.80, 'I':6.71, 'H':6.11, 'S':6.11, 'R':5.68, 'L':4.24, 'D':4.14, 'U':2.85, 'C':2.73, 'M':2.53, 'W':2.34, 'Y':2.04,'F':2.03, 'G':1.92, 'P':1.66,'B':1.54, 'V':1.06, 'K':0.87, 'J':0.23, 'X':0.20, 'Q':0.09, 'Z':0.06}
    ascivalue=65
    p=[]
    for i in english_letter_freq:
        letter=chr(ascivalue)
        p.append(english_letter_freq[letter])
        ascivalue=ascivalue+1
    return p


def Cal_Shifted_index(mini_text):
    p=english_letter_freq_list()
    #print(p)
    f=freqTable(mini_text)
    n=countLetters(mini_text)
    m=[0.0]*26
    for j in range(26):
        for i in range(26):
            #m.append((p[i]*f[i])/(100*n))
            m[j]=m[j]+(p[i]*f[(i+j)%26])/(100*n)
        m[j]=abs(m[j]-0.065)
    #print(m)    
    return m

text='PEMCMWSSUQBVLKYMRCFRRKKGBRFMEJWIAHIFWDYNTTSVCACEYCIRVAXGYMUKLWYRASNFNWIIAQZGUJCENREEOLRIAKQRRLSCHPBITGSNGISVSLWEBRTYOJOIGLPLGZDIJSVCDKKIYECFULKLVXUCESXDFIFKHWGAGISPPSBTBJUYEOYRYHJKIKKWNCJYANOOSHSZVAXGBJGKHWCPYIFEAFNRRKVCALSNTXIVCABCHPBKIGXWUIOVVWBISMOUMQCEYJHIOOSNTKSZMSLOHXUYEEYUGLXYEFOVRVJKIKKDNQQURAJZYCOFVWWBRVJEMQCOHPXYEFOVRVJWIFNMLWFCFAXVBPVETSBIYCQRUKSNTFFWOJOCBJGZNOKRRLPLSWCAAHCIIFQIAKVGTZORRESFFWFEECGLNWBAYMNVELKNQITGEUSAYPZNHWXEIISDYZIPBWHVTKECUEOLPHORUEOUOXWEGLBKILBE'
text=text.lower()
averages =[]
partitions = 3

totaltext=[[] for _ in range(partitions)]
print(text)
print(len(text))

##xt = input("Enter text:\n").lower()
averages =[]
partitions = 2
def FindKey(partitions):
    
    while(True):
        totaltext=[[] for _ in range(partitions)]
        print(len(totaltext))
        for i in range(0,len(text), partitions):
            k=0
            j=i
            while (k<partitions):
                if j< len(text):
                    
                    totaltext[k].append(text[j])
                    #print("total text= ",totaltext)
                    j+=1
                k+=1
        #read each partition
        totalvalues=[]
        for part in totaltext:
            mini_text =''
            #for loop to read each character of a inner list
            for char in part:
                mini_text = mini_text + char
                #print("mini text =",mini_text)
            print("For loop part is now completed\n\n\n\n\n")
            #print("mini text contains the text:",mini_text)
            #print("Letters in the minitext are ",countLetters(mini_text))
            totalvalues.append(IC(mini_text))
            #print("Total _values = ",totalvalues)
            
        average = sum(totalvalues)/len(totalvalues)
        print("Average  = ", average)
        if average >= 0.06 and average <= 0.07:
            print("Average of English langauge found\n")
            print("The key length is",partitions)
            print("Mini text= ",mini_text)
            print("length of mini text is", len(mini_text))
            break
        elif partitions==len(text):
            print("total text length searched \n")
            break
        else:
            print("Still Increamenting\n")
            partitions = partitions+1
        
    return partitions

cipher_text=''
cipher_text=cipher_text.lower()
index_coin=IC(cipher_text)
if 0.06 <= index_coin <= 0.07:
    print("Given cipher is monoalphabetic Hence going to calculate shifted index of coincidence to determine the exact type of cipher")
mg=Cal_Shifted_index(cipher_text)
if min(mg)>= 0.005:
    print("This is subsitution Cipher")
elif mg.index(min(mg))==0:
    print("This is Permutation Cipher")
else:
    print("This is Ceaser Cipher")
print(mg.index(min(mg)))

numberssss=Cal_Shifted_index('')

if min(numberssss)>= 0.005:
    print("This is subsitution Cipher")
elif numberssss.index(min(numberssss))==0:
    print("This is Permutation Cipher")
else:
    print("This is Ceaser Cipher")
print(numberssss.index(min(numberssss)))





